(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\buffer\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\buffer")
},{"VCmEsw":4,"base64-js":2,"buffer":1,"ieee754":3}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\base64-js\\lib\\b64.js","/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\base64-js\\lib")
},{"VCmEsw":4,"buffer":1}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\ieee754\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\ieee754")
},{"VCmEsw":4,"buffer":1}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}


process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\process\\browser.js","/..\\node_modules\\gulp-browserify\\node_modules\\browserify\\node_modules\\process")
},{"VCmEsw":4,"buffer":1}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

//ADD ICON TO LINKS THAT HAS EXTERNAL LINK
$("a[target=_blank]").each(function () {   

	if ( $("a[target=_blank]").has("img").length )
	{
		$(this).removeClass("external-url");
	}
	else
	{
		 $(this).addClass('external-url');
	}    
}); 

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/addExternaliconFunction.js","/")
},{"VCmEsw":4,"buffer":1}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

// IF COOKIE DOES NOT EXISTS, SHOW COOKIE POPUP
if($.cookie('analyticsAccepted') === undefined) {

	// SHOW COOKIE POPUP
	$('#cookies_viewer').show();

	// IF COOKIE IS ACCEPTED 
	$('#cookie_accept').click(function(e){
		e.preventDefault();
		setCookieAcceptance();
	});

	// IF COOKIE IS ACCEPTED 
	$('#cookie_cancel').click(function(e){
		e.preventDefault();
		$('#cookies_viewer').hide();
	});

	// If the user starts to click around, hide the cookie viewer and store cookie
    $("div#s4-bodyContainer a").click(function () {
        setCookieAcceptance();
    });
}
else {
	setCookieAcceptance();	
}

function setCookieAcceptance() {

	function loadSiteImprove(){
	    var sz = document.createElement('script');
	    sz.type = 'text/javascript';
	    sz.async = true;
	    sz.src = '//ssl.siteimprove.com/js/siteanalyze_260336.js';
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(sz, s);
	}

	// Hide the cookie view, and store cookie
	$('#cookies_viewer').hide();
	$.cookie('analyticsAccepted', "1", {expires: 365, path: '/' });

	// Load site-improve
	loadSiteImprove();
}


}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/cookie.js","/")
},{"VCmEsw":4,"buffer":1}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
﻿var clientContext;
var website;
var user;

function isInternetExplorer() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))
        return true;
    else
        return false;
}

function replaceDownloadLinks() {
    //var updateFileExt = new Array(".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx");
    //var checkString = "";

    //for (var i = 0; i < updateFileExt.length; i++) {
    //    checkString += 'a[href$="' + updateFileExt[i] + '"], a[href$="' + updateFileExt[i].toUpperCase() + '"], ';
    //}

    //checkString = checkString.substring(0, checkString.length - 2);

    //$(checkString).each(function () {
    //    if ((this.href.toLowerCase().indexOf("/_layouts/download.aspx?sourceurl=") > 0) === false) {
    //        var newDocUrl = "/_layouts/download.aspx?SourceUrl=" + encodeURI(this.pathname);
    //        this.href = newDocUrl;
    //    }
    //});
}

SP.SOD.executeFunc('sp.js', 'SP.ClientContext', checkIfUserIsAuthenticated);

function checkIfUserIsAuthenticated() {
    clientContext = SP.ClientContext.get_current();
    website = clientContext.get_web();
    user = website.get_currentUser();

    clientContext.load(user);
    clientContext.executeQueryAsync(
        function () {
            // User is authenticated. Do nothing.
        },
        function () {
            if (isInternetExplorer()) {
                replaceDownloadLinks();

                $(document).ajaxStop(function () {
                    replaceDownloadLinks();
                });
            }
        });
}

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/downloadOfficeDocuments.js","/")
},{"VCmEsw":4,"buffer":1}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
$(document).ready(function () {
	require('./foldableContent.js');

	require('./mainMenu.js');

	require('./toggleArrowFunction.js');

	require('./footerTabs.js');

	require('./shareFunction.js');

	require('./guidesFunction.js');

	require('./sharePointUtilities.js');

	require('./addExternaliconFunction.js');

	require('./tooltip.js');

	require('./cookie.js');
	
	require('./printFunction.js');

	require('./downloadOfficeDocuments.js');

	require('./newsLetterDialog.js');

	// NLH 2015-11-04 + Helper functions like copy to clipboard, toggle technical info messages showed like cookie message, etc. 
	require('./helperFunctions.js');

});

$(window).load(function () {
	require('./gridGallerySizeFunction.js');

	require('./showAllRefiner.js');

	$.getScript('/_layouts/15/ScriptResx.ashx?name=FvstResource&culture=' + document.documentElement.lang)
     .done(function () { 
     	FVST = {}; 
     	FVST.Res = Res;
     })
     .fail(function () { 
     	console.log("error"); 
     });
});
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_cd5802e8.js","/")
},{"./addExternaliconFunction.js":5,"./cookie.js":6,"./downloadOfficeDocuments.js":7,"./foldableContent.js":9,"./footerTabs.js":10,"./gridGallerySizeFunction.js":11,"./guidesFunction.js":12,"./helperFunctions.js":13,"./mainMenu.js":14,"./newsLetterDialog.js":15,"./printFunction.js":16,"./shareFunction.js":17,"./sharePointUtilities.js":18,"./showAllRefiner.js":19,"./toggleArrowFunction.js":20,"./tooltip.js":21,"VCmEsw":4,"buffer":1}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//**FOR NEW SP2013 CODE**//
//mmc@netcompany.com - JS FUNCTION FOR ACCORDION CONTENT TYPOGRAPHY MENUS - 13-11-2014

var localizedShowMoreText = document.documentElement.lang == 'da-DK' ? "Vis alle" : "Show all";
var localizedShowLessText = document.documentElement.lang == 'da-DK' ? "Skjul alle" : "Hide all";

//HACK FOR SHOWING MORE DIVS AFTER TOGGLE BOXES

//MAKE OLD CONTENT FOLDABLE
$(document).ready(function () {
    var inViewMode = 0;
    if (typeof (PageState) === 'undefined') {
        inViewMode = 1;
    }
    else {
        if (typeof (PageState.ViewModeIsEdit) === 'undefined') {
            inViewMode = 1;
        }
        else {
            if (!PageState.ViewModeIsEdit) {
                inViewMode = 1;
            }
        }
    }
    
    if ($('#foldAnchor').length === 0 && inViewMode) {
        var selection = $('div.ms-rteElement-FoldHeading');

        //Create anchor, so we know where we started, before messing up the DOM
        selection.first().before('<div id="foldAnchor" />');

        foldFixUp(selection, $('#foldAnchor'));

        //Remove old obsolete class
        $("DIV.ms-rteElement-FoldContent").removeClass("ms-rteElement-FoldContent");
    }
});


var foldFixUp = function (headings, baseElem) {

    headings.each(function (index, element) {
        var myElem, content, contentAfter, foldElement, s;

        myElem = $(element);

        s = myElem.html();
        myElem.html('<a href="#">' + s + '</a>');

        //remove from the DOM the divs belonging to this heading.
        content = myElem.nextUntil("div.ms-rteElement-FoldHeading:first").detach(); // div:not('.fvst-rteElement-DIV-JSFold')"); to test for as-long-as. But SharePoint might insert extra empty DIVs which will break the script function
        contentAfter = myElem.parent().nextUntil("div.ms-rteElement-FoldHeading:first").detach();

        //Create new div, and attach the previous detached's divs inside it
        foldElement = $('<div class="fake-fold fake-fold-closed" />');
        foldElement = foldElement.append(content);
        foldElement = foldElement.append(contentAfter);

        //move the current headline
        baseElem.after(myElem);
        //attach the newly created element after the heading.
        baseElem.next().after(foldElement);
        baseElem = baseElem.next().next();
    });

    if($('#foldAnchor').length){
        webparts = $(".ms-webpart-zone").detach();
    }

    //ADDING SHOW/HIDE BUTTONS TOP
    $(".ms-rteElement-FoldHeading").first().before(function () {
        return"<div class='btn_group'>" +
                    "<div id='show1'>" +
                       "<span class='fa-stack toggle'>" +
                            "<i class='fa-li fa fa-circle-thin'></i>" +
                            "<i class='fa-li fa fa-angle-down'></i>" +
                        "</span>" +
                        "<li class='left-border'>" + localizedShowMoreText + "</li>" +   
                        "<li class='seperator'>|</li>" +
                    "</div>" +
                    
                    "<div id='hide1'>" +
                        "<span class='fa-stack toggle'>" +
                            "<i class='fa-li fa fa-circle-thin'></i>" +
                            "<i class='fa-li fa fa-angle-up'></i>" +
                        "</span>" +
                        "<li class='left-border'>" + localizedShowLessText + "</li> " +  
                    "</div>" +
               "</div>";
    });

    //ADDING SHOW/HIDE BUTTONS BOTTOM
    $('.fake-fold:last').after(function () {
        return"<div class='btn_group'> "+
                  "<div id='show2'>" +
                     "<span class='fa-stack toggle'>" +
                        "<i class='fa-li fa fa-circle-thin'></i>" +
                         "<i class='fa-li fa fa-angle-down'></i>" +
                    "</span>" +
                      "<li class='left-border'>" + localizedShowMoreText + "</li>   " +
                       "<li class='seperator'>|</li>" +
                  "</div>" +
                    
                  "<div id='hide2'>" +
                     "<span class='fa-stack toggle'>" +
                        "<i class='fa-li fa fa-circle-thin'></i>" +
                          "<i class='fa-li fa fa-angle-up'></i>" +
                        "</span>" +
                        "<li class='left-border'>" + localizedShowLessText + "</li> " +  
                 "</div>" +
            "</div>";
    });

    //ADD WEBPARTS
    if($('#foldAnchor').length){
        $('.btn_group:last').after(webparts);
    }

    //CLICK FUNCTION FOR TOGGLING CONTENT AND TOOGLE BETWEEN ICONS
    $(".ms-rteElement-FoldHeading").click(function() {
        var elem = $(this);

        $(this).next().slideToggle('slow', function() {
            if ($(this).is(':visible')) {
                $(elem).css("background-image", "url(/_layouts/15/Netcompany.FVS0001/images/minusicon.png)");
            } else {
                $(elem).css("background-image", "url(/_layouts/15/Netcompany.FVS0001/images/plusicon.png)");
            }
        });
        return false;
    });

    //CLIK FUCNTION FOR SHOW OR HIDE ALL
    $("#show1,#show2").click(function () {
        $(".fake-fold").show('fast');
        $(".ms-rteElement-FoldHeading").css("background-image", "url(/_layouts/15/Netcompany.FVS0001/images/minusicon.png)");
    });
    $("#hide1,#hide2").click(function () {
        $(".fake-fold").hide('fast');
        $(".ms-rteElement-FoldHeading").css("background-image", "url(/_layouts/15/Netcompany.FVS0001/images/plusicon.png)");
    });

};
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/foldableContent.js","/")
},{"VCmEsw":4,"buffer":1}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//**FOR NEW SP2013 CODE**//
//mmc@netcompany.com - JS FUNCTION FOR MAIN MENU ICONS - 20-11-2014
//TO FIND THE CLICKED FOOTERTAB-ITEM AND TO HIGHLIGHT THE ONE THATS CLICKED.

//MAKE THE FIRST TAB CHECKED AND MAKE IT ACTIVE.
$(".tabs li input").first().attr('checked', 'checked');
$(".tabs li label").first().addClass('active');

//CHECK IF ANY TAB IS ACTIVE AND REMOVE ACTIVE CLASS
$(".tabs li label").click(function () {
    if($('.tabs li label').hasClass('active')){
        $('.tabs li label').removeClass('active');
    }
});

//MAKE CLICKED TAB ACTIVE
$(".tabs li label").click(function () {
        $(this).addClass('active');
});

//For accessibility using keyboard
//CHECK IF ANY TAB IS ACTIVE AND REMOVE ACTIVE CLASS
$(".tabs li").on("keypress click", "label", function () {
    if ($('.tabs li label').hasClass('active')) {
        $('.tabs li label').removeClass('active');
    }
});

//MAKE CLICKED TAB ACTIVE
$(".tabs li").on("keypress click", "label", function () {
    $(this).addClass('active');
    $(this).siblings('input[name=tabs]').click();
});

//MAKE MOBILE FOOTER ACCESSIBLE VIA KEYBOARD
$('.card').on('keyup', function (evt) {
if (evt.key === "Enter") {
    $(this).click();
}
});

//MAKE MOBILE MENU ACCESSIBLE VIA KEYBOARD  
$('.mobile-menu-img').on('keyup', function (evt) {
if (evt.key === "Enter") {
    $(this).click();
}

});
$('#mySidenav .fa-chevron-down, #mySidenav .fa-chevron-up').on('keyup', function (evt) {
    if (evt.key === "Enter") {
        $(this).click();
    }
});
$('#mySidenav').on('keyup', function (evt) {
    if (evt.key === "Escape") {
        closeNav();
    }
});
$('#Custom_Logo a').focusin(function (evt) {
    closeNav();
});

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/footerTabs.js","/")
},{"VCmEsw":4,"buffer":1}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//**FOR NEW SP2013 CODE**//
//mmc@netcompany.com - FUNCTION TO MAKE DIVS UNDER IMG IN GRIDGALLERY TO BE SAME SIZE- 1-12-2014

//ADD CLASS TO FOUND DIV
var addGridItemParagraphClass = function(index, element, paragraphName) {
    $(element).addClass(paragraphName + index);
};

//GET THE BIGGEST DIV AND SET DIV WITH SAME ID TO THE BIGGEST SIZE
//var i = 1;
$("#col-left").find('.grid_item').each(function(index, element) {
	addGridItemParagraphClass(index, element, 'left_paragraph_');
});

$("#col-right").find('.grid_item').each(function(index, element) {
	addGridItemParagraphClass(index, element, 'right_paragraph_');
});

$(".gridgallery-list-item").each(function(index) {
	var left_paragraph = $('.left_paragraph_' + index);
	var right_paragraph =  $('.right_paragraph_' + index);

	var left_paragraph_height = left_paragraph.height();
	var right_paragraph_height =  right_paragraph.height();

	if(left_paragraph_height > right_paragraph_height) {
  		right_paragraph.css('height', left_paragraph_height + 'px');	  		
	} else {
  		left_paragraph.css('height', right_paragraph_height + 'px');
	}
});
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/gridGallerySizeFunction.js","/")
},{"VCmEsw":4,"buffer":1}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//**FOR NEW SP2013 CODE**//
//mmc@netcompany.com - JS FUNCTION GUIDES FOLDIN/FOLDOUT- 25-11-2014

//JS FOR GUIDES FOLDIN/FOLDOUT - (FOR PAGES WITH AJAX CALL)
//TO MAKE THIS RENDER ON WINDOW LOAD NOT ON DOCUMENT READY.(Global Function)

//WE HAVE TO IMPORT 
	//GuideV2.js in here and cleanup and structur js in the file.  

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/guidesFunction.js","/")
},{"VCmEsw":4,"buffer":1}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* 
	Copy data to clipboard without using Flash (see http://caniuse.com/#search=clipboard) 
	IE9, IE10 and IE11 supports clipboardData were user grants access. For other browser we show prompt, were user can copy the data with Ctrl+C shortcut key
*/
function copyToClipboard(element,copyText) {
	$(element).select();	 
	var text = $(element).val();
	if (copyText) text = $(element).text();
	try {
		if( window.clipboardData && clipboardData.setData ){ 
			window.clipboardData.setData("Text", text); 
		} 
		else {
			// If browser does not support the copy action exception is thrown and default behavior used
			document.execCommand("copy");
		}
	}
	catch(e) {
		// Default that works in all browsers
		window.prompt("Ctrl+C", text);
	} 
}

// Global message if shown everytime user refreshes the page, if more than 30 minutes has elapsed since last time it was displayed 
function showGlobalMessage() {

	// If not TechnicalStatus_Visible=0 if SharePoint backend list, then technical status messages are disabled all together
	if (!$('#global_message').hasClass("global_message_hide")) { 
		$('#global_message_close_btn').click(function(e){
			//$('#global_message').hide();
			//$('#s4-workspace').css("height","100%");
			e.preventDefault();

			var date = new Date();
			var minutes = $('#ctl00_ctl45_GlobalMessageCookieTimeout').val();
	 		date.setTime(date.getTime() + (minutes * 60 * 1000));
	 		var timestamp = $('#ctl00_ctl45_GlobalMessageTimestamp').val();
			$.cookie('globalMessageClosed', timestamp, {expires: date, path: '/' });
			location.reload(false);
		});
		// Check if user already closed global message today or if user control added hide css class to indicate global message was disabled server side
		var timestamp = $("#ctl00_ctl45_GlobalMessageTimestamp").val();

		//console.log('globalMessageClosed: '+$.cookie('globalMessageClosed')+'!=='+timestamp);
		if($.cookie('globalMessageClosed') !== timestamp) {
			$('#global_message').show();
		}
	}
}

/* Add speech bubble after search result is loaded
	parentSelector: 	Use jQuery selector to find parent of speech buble ".search_row_item th:last-child"
	id: 				Any id like "mybubble"
	html: 				Give som HTML text for the P tag like "Hello world!"
	className: 			Apply class pos0, pos1, pos2, pos3, pos4 to position of speech bubble top triangle  
function showSpeechBubble(parentSelector,id,html,className) {
	var pos = "pos0";
	if (className) pos = className;
	$(parentSelector).append('<p class="triagle-top-spacer"></p>');
	$(parentSelector).append('<p id="'+id+'"class="triangle-border top '+pos+'">'+html+'</p>');
}

function showSearchResultSpeechBubble(element) {
	var tr = $(element).parents(".search_row_item").next(".search_row_info");
	if (tr) {
		tr.css("display","table-row");
	}
}

function hideSearchResultSpeechBubble(element) {
	$(element).parent(".search_row_info").hide();
}

function toggleSearchResultSpeechBubble(element,event) {
	event.preventDefault();
	var tr = $(element).parents(".search_row_item").next(".search_row_info");
	if (tr) {
		if (tr.css("display") === "none") {
			tr.css("display","table-row");
		}
		else {
			tr.hide();			
		}
	}
	return false;
}

*/

(function(window, document, undefined){
    window.copyToClipboard = copyToClipboard;
    window.showGlobalMessage = showGlobalMessage;
    /*window.showSpeechBubble = showSpeechBubble;
    window.showSearchResultSpeechBubble = showSearchResultSpeechBubble;
    window.hideSearchResultSpeechBubble = hideSearchResultSpeechBubble;
    window.toggleSearchResultSpeechBubble = toggleSearchResultSpeechBubble;*/
})(window, document);

// Helper functions are called on document.ready in main.js
showGlobalMessage();

//Test speech bubble after any element
//showSpeechBubble(".search_row_item th:last-child","mybubble","Hello world!","pos4"); 
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/helperFunctions.js","/")
},{"VCmEsw":4,"buffer":1}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

    //Set alt-tag="" for all images without alt-tag.
    //find better location for this code?
    $(document).ready(function () {
        $('body img').each(function () {
            if (!$(this).attr('alt')) {
                //set the alt text if the attribute is not found as below
                $(this).attr('alt', "");
            }
        });
    });


    $('.profession_list, .situation_list').on('keyup', 'ul > li > a', function (evt) {
        if (evt.key === "Escape") {
            search_profession();
            $('#search_profession_id').focus();
        }
    });

    $(window).load(function () {
        $('#extended_search').find('#SearchBox').on('keyup', 'input, a', function (evt) {
            if (evt.key === "Escape") {
                search_click();
                $('#search_icon_wrapper_id').focus();
            }
        });
    });

    //**WCAG UPDATE TO MAINMENU**//
    //**See Jquery-accessibleMegaMenu.js aswell **//

    $("#global_nav").accessibleMegaMenu({
        /* prefix for generated unique id attributes, which are required 
           to indicate aria-owns, aria-controls and aria-labelledby */
        uuidPrefix: "accessible-megamenu",

        /* css class used to define the megamenu styling */
        menuClass: "nav-menu",

        /* css class for a top-level navigation item in the megamenu */
        topNavItemClass: "nav-item",

        /* css class for a megamenu panel */
        panelClass: "sub-nav",

        /* css class for a group of items within a megamenu panel */
        panelGroupClass: "sub-nav-group",

        /* css class for the hover state */
        hoverClass: "hover",

        /* css class for the focus state */
        focusClass: "focus",

        /* css class for the open state */
        openClass: "open"
    });

    // SHOW AND HIDE SEARCH PROFESSION
    $(window).click(function (e) {
        if ($(e.target).is("#search-profession-toggle-btn")) {
            search_profession_close_other();
            $(".TopMenuBarLink.open").find("label").click();
        }
        else if ($(e.target).is("#search-toggle-btn")) {
            search_click_close_others();
            $(".TopMenuBarLink.open").find("label").click();
        }

    });

    function search_profession() {
        if ($("#search-profession-toggle-btn").prop("checked") == false) {
            //Open Search profession
            $("#search-profession-toggle-btn").prop("checked", true);
            $('#extended_search_profession > div > div.profession_list.noindex > ul > li:nth-child(1) > a').focus();
        }
        else {
            //Search-profession is closed
            $("#search-profession-toggle-btn").prop("checked", false);
        }

        search_profession_close_other();
    }

    function search_click() {
        if ($("#search-toggle-btn").prop("checked") == false) {
            //Open Search
            $("#search-toggle-btn").prop("checked", true);
            $('#ctl00_PlaceHolderSearchArea_ctl00_csr_sbox').focus();
            
        }
        else {
            //Close search
            $("#search-toggle-btn").prop("checked", false);
        }
        search_click_close_others();
    }

    function search_profession_close_other() {
        if ($("#search-profession-toggle-btn").prop("checked") == true) {
            //Close other menu tabs
            $(".TopMenuBarLink.open").find("label").click();

            if ($("#search-toggle-btn").prop("checked") == true) {
                $("#search-toggle-btn").prop("checked", false);
            }

        }
    }

    function search_click_close_others() {
        if ($("#search-toggle-btn").prop("checked") == true) {

            //Close other menu tabs
            $(".TopMenuBarLink.open").find("label").click();
            if ($("#search-profession-toggle-btn").prop("checked") == true) {
                $("#search-profession-toggle-btn").prop("checked", false);
            }
        }

    }
    (function (window, document, undefined) {
        window.search_click = search_click;
        window.search_profession = search_profession;
        window.search_profession_close_other = search_profession_close_other;
        window.search_click_close_others = search_click_close_others;
    })(window, document);

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/mainMenu.js","/")
},{"VCmEsw":4,"buffer":1}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
function showNewsletterDialog(dialogUrl) {
    var dialog = {
        url: dialogUrl,
        title: 'Tilføj til nyhedsbrev',
        allowMaximize: true,
        showClose: true,
        width: 420,
        height: 580,
        dialogReturnValueCallback: function (dialogResult) {
            if (dialogResult == SP.UI.DialogResult.OK) {
                var statusOkId;
                statusOkId = SP.UI.Status.addStatus("Nyhedsbrev:", "Siden er tilføjet til valgte emne(r)");
                SP.UI.Status.setStatusPriColor(statusOkId, "green");
                setTimeout(function () { SP.UI.Status.removeStatus(statusOkId); }, 5000);
            } else {
                var statusCancelId;
                statusCancelId = SP.UI.Status.addStatus("Nyhedsbrev:", "Siden blev ikke tilføjet da et eller flere emner ikke blev valgt");
                SP.UI.Status.setStatusPriColor(statusCancelId, "yellow");
                setTimeout(function () { SP.UI.Status.removeStatus(statusCancelId); }, 5000);
            }
        }
    };

    SP.UI.ModalDialog.showModalDialog(dialog);
}

function showSendNewsLetterDialog(dialogUrl) {
    var dialog = {
        url: dialogUrl,
        title: 'Send nyhedsbrev',
        allowMaximize: true,
        showClose: true,
        width: 460,
        height: 260,
        dialogReturnValueCallback: function (dialogResult) {
            if (dialogResult == SP.UI.DialogResult.OK) {
                var statusOkId;
                statusOkId = SP.UI.Status.addStatus("Nyhedsbrev:", "Er under afsendelse...");
                SP.UI.Status.setStatusPriColor(statusOkId, "green");
                setTimeout(function () { SP.UI.Status.removeStatus(statusOkId); }, 5000);
            } else {
                var statusCancelId;
                statusCancelId = SP.UI.Status.addStatus("Nyhedsbrev:", "Blev ikke afsendt da vinduet blev lukket");
                SP.UI.Status.setStatusPriColor(statusCancelId, "yellow");
                setTimeout(function () { SP.UI.Status.removeStatus(statusCancelId); }, 5000);
            }
        }
    };

    SP.UI.ModalDialog.showModalDialog(dialog);
}

(function(window, document, undefined){
    window.showNewsletterDialog = showNewsletterDialog;
    window.showSendNewsLetterDialog = showSendNewsLetterDialog;
})(window, document);
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/newsLetterDialog.js","/")
},{"VCmEsw":4,"buffer":1}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
(function () {
    var beforePrint = function () {
        $("div,a,h3,h2,h1,p,span,time").css("font-family", "Segoe UI");
        //Fold everything out
        $(".fake-fold").show();
        $(".ms-rteElement-FoldHeading").css("background-image", "url(/_layouts/15/Netcompany.FVS0001/images/minusicon.png)");
    };
    var afterPrint = function () {
        $(".fake-fold").hide();
        $(".ms-rteElement-FoldHeading").css("background-image", "url(/_layouts/15/Netcompany.FVS0001/images/plusicon.png)");
    };

    if (window.matchMedia) {
        var mediaQueryList = window.matchMedia('print');
        mediaQueryList.addListener(function (mql) {
            if (mql.matches) {
                beforePrint();
            } else {
                afterPrint();
            }
        });
    }

    window.onbeforeprint = beforePrint;
    window.onafterprint = afterPrint;
}());
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/printFunction.js","/")
},{"VCmEsw":4,"buffer":1}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//**FOR NEW SP2013 CODE**//
//mmc@netcompany.com - Toggle Share-btn - 20-11-2014

//Service menu
$(".share").click(function () {
    $(".share_btns").slideToggle('show');
});
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/shareFunction.js","/")
},{"VCmEsw":4,"buffer":1}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

(function(window, document, undefined){

    window.SharePointUtilities = window.SharePointUtilities || {};

    /*
    window.SharePointUtilities.showDialog = function (url, title, height, width) {
        var options = {
            url: url, //+ "&IsDlg=1",
            title: title,
            allowMaximize: true,
            showClose: true,
            width: width,
            height: height,
            dialogReturnValueCallback: dialogCallback
        };
        SP.SOD.execute('sp.ui.dialog.js', 'SP.UI.ModalDialog.showModalDialog', options);
        return false;
    };

    function dialogCallback(result, response) {
        switch (result) {
            case SP.UI.DialogResult.cancel:
                //do nothing
                break;
            case SP.UI.DialogResult.invalid:
                //do nothing
                break;
            case SP.UI.DialogResult.ok:
                var note = SP.UI.Notify.addNotification(response.message);
                break;
        }
    }
    */


    //function to open pages in a dialog
    function openInDialog(dlgWidth, dlgHeight, dlgAllowMaximize,dlgShowClose,needCallbackFunction, pageUrl) 
    {    
        var options = { url: pageUrl, width: dlgWidth, height: dlgHeight, allowMaximize: dlgAllowMaximize,
            showClose: dlgShowClose     
            };
            
        if(needCallbackFunction)
        {
            options.dialogReturnValueCallback = Function.createDelegate(null, CloseDialogCallback);
        }
        SP.SOD.execute('sp.ui.dialog.js', 'SP.UI.ModalDialog.showModalDialog', options);
    }

    function CloseDialogCallback(dialogResult, returnValue)
    {
        //if user click on OK or Save
         if(dialogResult == SP.UI.DialogResult.OK)
         {  // refresh parent page
            SP.SOD.execute('sp.ui.dialog.js', 'SP.UI.ModalDialog.RefreshPage', SP.UI.DialogResult.OK);          
         }
         // if user click on Close or Cancel
         else if(dialogResult == SP.UI.DialogResult.cancel)
         {  // Do Nothing or add any logic you want 
         }
         else
         {//alert("else " + dialogResult);
         }
    }

    window.SharePointUtilities.openInDialog = openInDialog;

})(window, document);

}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/sharePointUtilities.js","/")
},{"VCmEsw":4,"buffer":1}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
//TO MAKE THIS RENDER ON WINDOW LOAD NOT ON DOCUMENT READY.(Global Function)
(function(window, document, undefined){
  	window.toggleShowButton = function(showButton){
	  	var selector = $(showButton);
		selector.parent().siblings().find('.hidden_refiner_list').slideToggle('slow');				        

		var localizedShowMoreText = document.documentElement.lang == 'da-DK' ? "Vis flere" : "Show more";
		var localizedShowLessText = document.documentElement.lang == 'da-DK' ? "Vis færre" : "Show less";

		var showButtonText = (selector.html() == localizedShowLessText ? localizedShowMoreText : localizedShowLessText);
		selector.html(showButtonText);
	};
})(window, document);
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/showAllRefiner.js","/")
},{"VCmEsw":4,"buffer":1}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/////////!!!!!!! Make comments and make functions reusabel as variable////////////////////////!!!!!!

//**FOR NEW SP2013 CODE**//
//mmc@netcompany.com - ToggleFunctions - 19-11-2014

//Service menu
// FOR TOOGLE ARROW UP AND DOWN INSIDE CIRCLE 
$(".toggle").click(function () {
    $(".toggle_arrow").toggleClass('fa-angle-down fa-angle-up');
});

//TOGGLE CHEVRONS (!!!!!!!!!!MAYBE REMOVE THIS!!!!!!!!!!!!!) 
$(".toggle_chevron").click(function () {
    $(this).find('i').toggleClass('fa-chevron-down fa-chevron-up');
});

//TOGGLE + - icons - IS USED ON ALL GUIDE ROOLUP ! 
/*$(".toggle_btn").click(function () {
    $(this).find('i').toggleClass('plus_icon minus_icon');
    $(this).find(".PickerShowAll").toggleClass("PickerHideShow-None");
});*/

// NEW TOGGLE + - icons AND ShowAll HideAll
$(".toggle_btn").find('input').change(function(){
	$(this).parent().find('i').first().toggleClass('plus_icon minus_icon');
    $(this).parent().find(".PickerShowAll").toggleClass("PickerHideShow-None");
});

$(".PickerShow, .plus_minus").click(function() {
    $(this).closest('.toggle_btn').find('input').trigger('click');
});

//TOGGLE + - icons - IS USED ON ALL GUIDE ROOLUP !
$(".template_toggle_btn").click(function () {
    $(this).find('i').toggleClass('plus_icon minus_icon');
});

//FOR STD SHAREPOINT WEBPART
if($(".top_refiner_container input:checked")){
    $(".top_refiner_container input:checked").next('label').addClass('active_refiner');
}

// NLH 2015-11-03 : Add icons for external urls only
$(".textrotator_manchet").find("a").each(function( index ) {
  var href = $(this).attr("href");
  if (href && href.indexOf('http')===0) {
  	 $(this).addClass("external-url");
  }
  else {
  	 $(this).addClass("internal-url");	
  }
});


}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/toggleArrowFunction.js","/")
},{"VCmEsw":4,"buffer":1}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
$('.tooltip').tooltipster({
	multiple: true,
	position: 'top'
});
}).call(this,require("VCmEsw"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tooltip.js","/")
},{"VCmEsw":4,"buffer":1}]},{},[8])
//# sourceMappingURL=data:application/json;base64,

/* Mobile menu JS start */
$(function () {
    $(".sidenav-nested-toggler").click(function () {
        $(this).next(".sidenav-nested-hidden").toggle();
        $(this).toggleClass("fa-chevron-down fa-chevron-up");
    });
});

/* Search sites stuff */
/*$(window).resize(function () {
    if(window.screen.width > 991){
        $(".refiner_list").addClass("hidden_refiner_list");
    }
    if (window.screen.width >= 991) {
        $(".refiner_list:lt(5)").removeClass("hidden_refiner_list").show(":hidden");
    }
});*/

function openNav() {
    document.getElementById("mySidenav").style.width = "100%";
    //document.getElementById("mySidenav").style.height = "100%";
    document.getElementById("mySidenav").style.position = "absolute";
    document.getElementById("mySidenav").style.display = "block";
    //document.getElementById("main").style.marginLeft = "250px";
    //document.body.style.backgroundColor = "rgba(0,0,0,0.4)";
}

/* Set the width of the side navigation to 0 and the left margin of the page content to 0, and the background color of body to white */
function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
    //document.getElementById("mySidenav").style.height = "0";
    document.getElementById("mySidenav").style.display = "none";
    //document.body.style.backgroundColor = "white";
}
$(document).ready(function () {
    $("#sidenav-list > li").click(function () {
        $(this).find("ul.sidenav-list-nested").toggleClass('hide');
    });
    $(".content_main table, .content_main .ms-rtestate-field img").wrap("<div class='table-wrapper'></div>");
});

